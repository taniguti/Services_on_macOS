#!/bin/bash

function _readlink(){
    f=`basename "$1"`
    d=`cd $(dirname "$1"); pwd`
    if [ -L "${d}/${f}" ]; then
        r="`readlink -n \"${d}/${f}\"`"
        _readlink "$r"
    else
        echo "${d}/${f}"
    fi
}

function showhelp(){
    cat << _HELP

Configuration:
    $iam [show-config|show] : Show current vpn configuration.
    $iam [presharedkey|psk] : Configure preshared key.
    $iam [client-address-range|car] : Configure IP address range for VPN clients
    $iam [hostname] : Configure access hostname

Control:
    $iam start : Start VPN service
    $iam stop : Stop VPN service
    $iam [status|fullstatus] : Show status of VPN service.
    $iam restart : Restart VPN service
    $iam reload : Reload configuration

Setup/Migrate/Deploy:
    $iam migrate : Migrate VPN service from macOS Server to macOS. $iam helps your VPN Service instaed of serveradmin.
    $iam init : Setup VPN service for macOS initially.
    $iam profile : Export configuration profile for VPN Service

_HELP
}

function chkcond(){
    isRoot=yes
    isConfigured=yes
    if [ `whoami` != root ]; then isRoot=no ; fi
    if [ ! -f "$plist_file" ]; then isConfigured=no ; fi
    if [ ! -f "$vpn_config" ]; then isConfigured=no ; fi
}

function chkconfig(){
    chk=$1
    if [ ${chk:-no} = 'init' ]; then
        if [ $isConfigured = "yes" ]; then
            echo "Configured already."
            exit 1
        fi
    fi
    if [ $isConfigured = "no" ]; then
        echo "Not configured yet."
        echo "For configure vpn service, type \"sudo $iam [init|migrate]\""
        exit 1
    fi
}

function chkroot(){
    if [ $isRoot != "yes" ]; then
        echo "Use me with 'sudo'"
        echo "sudo $iam $subcmd"
        exit 1
    fi
}

vpn_config="/Library/Preferences/SystemConfiguration/com.apple.RemoteAccessServers.plist"
plist_file="/Library/LaunchDaemons/vpn.ppp.l2tp.plist"
service_domain="system/vpn.ppp.l2tp"
iam=`basename "$0"`
fullpath_to_me=`_readlink "$0"`
pathtome="`dirname \"$fullpath_to_me\"`"

subcmd=`echo -- $1 | awk '{print $NF}' | tr [:upper:] [:lower:]`
isHelp=`echo -- $2 | awk '{print $NF}' | tr [:upper:] [:lower:]`
shift
args=$@

chkcond
if [ ${subcmd}x = x ]; then subcmd=help ; fi
if [ ${subcmd} = help ]; then args='-h' ; fi
case $subcmd in
    show-confing | show )
        chkconfig
        VPNHOST=`${pathtome}/vpndc-hostname -s`
        DNSINFO=`${pathtome}/vpndc-dns -s | awk '{print " "$0}'`
        ADDRINFO=`${pathtome}/vpndc-car -s | awk '{print " "$0}'`

        cat << _CONFIG

VPN service hostname: $VPNHOST
IP addresses for VPN Clients:
$ADDRINFO
DNS for VPN client:
$DNSINFO
Preshared Key: << Type 'sudo vpndc presharedkey -s' >>

_CONFIG

    ;;
presharedkey | psk | client-address-range | car | dns | hostname | profile )
    if [ ${isHelp:-'help'} = help ]; then args='-h'; fi
    case "${args}" in
        '-h' )
            : no check
            ;;
        '-s' )
            chkconfig
            ;;
        * )
            chkconfig
            chkroot
            ;;
    esac
    "${pathtome}/${subcmd}" ${args}
    ;;
migrate | init )
    if [ ${isHelp:-'help'} = help ]; then args='-h'; fi
    case "${args:='-h'}" in
        '-h' )
            : no check
            ;;
        * )
            chkconfig
            chkroot
            ;;
    esac
    if [ $args != '-h' ]; then
        if [ ! -f "$vpn_config" ]; then
            echo "Not found ${vpn_config}."
            echo "Execute initial setup."
            args='-i'
        else
            echo "Found ${vpn_config}."
            echo "Execute migration."
            args='-m'
        fi
    fi
    "${pathtome}/${subcmd}" ${args}
    ;;
start | stop | status | fullstatus | restart | reload )
    case "${args}" in
        '-h' )
            showhelp
            ;;
        * )
            chkconfig
            chkroot
            case ${subcmd} in
                start )
                    launchctl load -w "$plist_file"
                    ;;
                stop )
                    launchctl unload -w "$plist_file"
                    ;;
                status | fullstatus )
                    launchctl print $service_domain > /dev/null 2>&1
                        rtn=$?
                        if [ $rtn -ne 0 ]; then
                            echo "not running"
                            exit $rtn
                        fi
                        if [ ${subcmd} = status ]; then
                            launchctl print $service_domain | awk '$1 == "state" {print $3}'
                        else
                            launchctl print $service_domain
                        fi
                        ;;
                    restart )
                        launchctl kickstart -k $service_domain
                        ;;
                    relaod )
                        launchctl kill HUP $service_domain
                        ;;
                esac
                ;;
        esac
        ;;
    * )
        showhelp
        ;;
esac
