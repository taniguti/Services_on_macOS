#!/bin/bash

function _readlink(){
    f=`basename "$1"`
    d=`cd $(dirname "$1"); pwd`
    if [ -L "${d}/${f}" ]; then
        r="`readlink -n \"${d}/${f}\"`"
        _readlink "$r"
    else
        echo "${d}/${f}"
    fi
}

function show_help(){
    cat <<_HELP

Usage::
    $iam -i [-f] : Initial setup. for Standard macOS. '-f' will make reset and then initial setup.
    $iam -m [-f] : Migrate from macOS Server's VPN service. '-f' will as same as '-i -f'.
    $iam -h : Show this message.

_HELP
}

function stop_vpnd(){
    LOG=/tmp/stop_vpnd.log
    service_domain="system/vpn.ppp.l2tp"
    SA="/Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin"
    if [ -x "$SA" ]; then
        $SA stop vpn >> $LOG 2>&1
    fi
    killall -HUP vpnd
    launchctl disable $service_domain >> $LOG 2>&1
    launchctl unload -w $service_domain >> $LOG 2>&1
}

function ask_parms(){
    cat <<_INST

New configuration parameters are required.
- VPN hostname.
- Starting IP address for VPN client
-  and number of addresses for it.

_INST

    while true
    do
        read -p "Enter VPN Hostname: " VPNHOST
        if [ ${VPNHOST:-x} = x ]; then continue ; fi
        break
    done
    while true
    do
        read -p "Enter start at IP address: " IPADDR
        if [ ${IPADDR:-x} = x ]; then continue ; fi
        if [ `"${pathtome}/ipcalc" -c $IPADDR` = "not_valid" ]; then continue ; fi
        break
    done
    while true
    do
        read -p "Enter number of address: " NUM
        if [ ${NUM:-x} = x ]; then continue ; fi
        expr $NUM + 1 > /dev/null 2>&1
        if [ $? -ne 0 ]; then continue ; fi
        break
    done
}

iam=`basename "$0"`
fullpath_to_me=`_readlink "$0"`
pathtome="`dirname \"$fullpath_to_me\"`"
SYSCONFDIR="/Library/Preferences/SystemConfiguration"
LAUNCHDIR="/Library/LaunchDaemons"
PNAME="com.apple.RemoteAccessServers.plist"
LAUNCHPLIST="vpn.ppp.l2tp.plist"
TEMPDIR="${pathtome}/templates"
mode=help
etype=migrate

if [ $# = 0 ]; then show_help ; exit 1 ; fi
while getopts fimh sw
do
    case $sw in
        f )
            mode=force
            ;;
        i )
            etype=init
            ;;
        m )
            etype=migrate
            ;;
        * )
            show_help
            exit 1
            ;;
    esac
done

if [ `whoami` != root ]; then
    echo "You need administrator access to run this tool..."
    show_help
    exit 1
fi

if [ $mode = force ]; then
    etype=init
    stop_vpnd
    rm -f "${SYSCONFDIR}/${PNAME}"
    rm -f "${LAUNCHDIR}/${LAUNCHPLIST}"
fi

case $etype in
    init )
        if [ -f "${SYSCONFDIR}/${PNAME}" -o -f "${LAUNCHDIR}/${LAUNCHPLIST}" ]; then
            echo "VPN service is already configured."
            echo "Abort!"
            show_help
            exit 1
        fi

        DNSSERVERS="`awk '$1 == "nameserver" {print $2}' /etc/resolv.conf | tr '\n' ','| tr -d [:blank:]`"
        if [ `echo "$DNSSERVERS" | wc -c` -eq 0 ]; then
            echo "No name server found in /etc/resolv.conf"
            echo "Abort!"
            exit 1
        fi

        SEARCH="`awk '$1 == "search" {$1="";print $0}' /etc/resolv.conf | tr '\n' ',' | tr [:blank:] ','`"
        if [ `echo "$SEARCH" | wc -c` -eq 0 ]; then
            SEARCH=''
        else
            SEARCH="-D $SEARCH"
        fi

        ask_parms

        cp "${TEMPDIR}/${PNAME}" "${SYSCONFDIR}/${PNAME}"
        cp "${TEMPDIR}/${LAUNCHPLIST}" "${LAUNCHDIR}/${LAUNCHPLIST}"
        chmod 644 "${SYSCONFDIR}/${PNAME}"
        chmod 644 "${LAUNCHDIR}/${LAUNCHPLIST}"
        chown 0:0 "${SYSCONFDIR}/${PNAME}"
        chown 0:0 "${LAUNCHDIR}/${LAUNCHPLIST}"

        "${pathtome}/vpndc-dns" -d $DNSSERVERS $SEARCH
        "${pathtome}/vpndc-hostname" -S $VPNHOST
        "${pathtome}/vpndc-car" -S $IPADDR -n $NUM
        "${pathtome}/vpndc-presharedkey" -C > /dev/null 2>&1

        ;;
    migrate )
        if [ -f "${LAUNCHDIR}/${LAUNCHPLIST}" ]; then
            echo "VPN service is already configured."
            echo "Abort!"
            show_help
            exit 1
        fi
        stop_vpnd
        cp "${TEMPDIR}/${LAUNCHPLIST}" "${LAUNCHDIR}/${LAUNCHPLIST}"
        chmod 644 "${LAUNCHDIR}/${LAUNCHPLIST}"
        chown 0:0 "${LAUNCHDIR}/${LAUNCHPLIST}"
        ;;
esac

launchctl load -w "${LAUNCHDIR}/${LAUNCHPLIST}" > /dev/null 2>&1
T=10
/bin/echo -n "Starting VPN Service. Wait $T seconds"
for n in `seq 1 $T`
do
    /bin/echo -n '. '
    sleep 1
done
echo ""
vpnstatus=`${pathtome}/vpndc status`
if [ $vpnstatus = 'running' ]; then
    echo "Good! Your VPN service is now ${vpnstatus}."
    exit 0
else
    echo "Failed! Something wrong."
    exit 1
fi
